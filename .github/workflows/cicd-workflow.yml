name: CICD Pipeline

# Trigger the workflow on every push to the 'main' branch
on:
  push:
    branches: ["main"]

jobs:
  build:
    name: ðŸ”§ Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the source code from the repository
      - name: Checkout Source Code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials using secrets stored in GitHub
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      # Step 3: Login to Amazon ECR (Elastic Container Registry)
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      # Step 4: Build Docker image from the Dockerfile and push to ECR
      - name: Build, Tag, and Push Docker Image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
          REPOSITORY: ctsejs-app
        run: |
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG -f ./userservice/Dockerfile ./userservice
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # Output the image URI for use in the deploy job
    outputs:
      image-uri: ${{ steps.build-image.outputs.image }}

  deploy:
    name: Deploy to Amazon ECS
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step 1: Checkout the source code again for this job
      - name: Checkout Source Code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials again
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      # Step 3: Replace the image in the ECS task definition with the new one
      - name: Update ECS Task Definition with New Image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./userservice/ctse-app-task-definition.json
          container-name: ctsejs-app
          image: ${{ needs.build.outputs.image-uri }}

      # Step 4: Deploy the updated task definition to the ECS service
      - name: Deploy Updated Task Definition to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: userservice-app-service
          cluster: devCluster
          wait-for-service-stability: true
